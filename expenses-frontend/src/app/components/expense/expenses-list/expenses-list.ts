import { Component, OnInit} from '@angular/core';
import { ExpenseResponse } from '../../../models/expense/expense-response.model';
import { ExpenseService } from '../../../services/expense/expense-service';
import Swal from 'sweetalert2';
import { ExpenseUpdateRequest } from '../../../models/expense/expense-update-request.model';


@Component({
  selector: 'app-expenses-list',
  standalone: false,
  templateUrl: './expenses-list.html',
  styleUrl: './expenses-list.css'
})

export class ExpensesList implements OnInit{


  expenses: ExpenseResponse[] = [];
  loading = true;
  errorMessage: string | null = null;

  modalVisible = false;
  editingExpense: ExpenseResponse | null = null;

  constructor(private expenseService: ExpenseService) {}

  ngOnInit(): void {
    this.loadExpenses();
  }

  private loadExpenses() {
    this.loading = true;
    this.expenseService.getExpenses().subscribe({
      next: (data) => { this.expenses = data; this.loading = false; },
      error: (e) => { this.errorMessage = '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏'; this.loading = false; }
    });
  }

  openCreate() {
    this.editingExpense = null;
    this.modalVisible = true;
  }

  openEdit(expense: ExpenseResponse) {
    this.editingExpense = expense;
    this.modalVisible = true;
  }

  saveExpense(data: ExpenseUpdateRequest) {
    if (this.editingExpense) {
      this.expenseService.updateExpense(this.editingExpense.id!, data).subscribe({
        next: (updated) => {
          this.expenses = this.expenses.map(x => x.id === updated.id ? updated : x);
          this.modalVisible = false;
          Swal.fire('‚úÖ –£—Å–ø—ñ—Ö', '–í–∏—Ç—Ä–∞—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–æ', 'success');
        },
        error: (err) => Swal.fire('üö® –ü–æ–º–∏–ª–∫–∞', err?.error?.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É', 'error')
      });
    } else {
      this.expenseService.createExpense(data).subscribe({
        next: (created) => {
          this.expenses = [created, ...this.expenses];
          this.modalVisible = false;
          Swal.fire('‚úÖ –£—Å–ø—ñ—Ö', '–í–∏—Ç—Ä–∞—Ç—É –¥–æ–¥–∞–Ω–æ', 'success');
        },
        error: (err) => Swal.fire('üö® –ü–æ–º–∏–ª–∫–∞', err?.error?.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É', 'error')
      });
    }
  }

  confirmDelete(e: ExpenseResponse) {
    Swal.fire({
      title: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è?',
      text: `–í–∏–¥–∞–ª–∏—Ç–∏: "${e.description}"`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: '–¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏',
      cancelButtonText: '–°–∫–∞—Å—É–≤–∞—Ç–∏'
    }).then((res) => {
      if (!res.isConfirmed || !e.id) return;

      this.expenseService.deleteExpense(e.id).subscribe({
        next: () => {
          this.expenses = this.expenses.filter(x => x.id !== e.id);
          Swal.fire('üóë –í–∏–¥–∞–ª–µ–Ω–æ!', '–í–∏—Ç—Ä–∞—Ç—É –≤–∏–¥–∞–ª–µ–Ω–æ', 'success');
        },
        error: (err) => Swal.fire('üö® –ü–æ–º–∏–ª–∫–∞', err?.error?.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É', 'error')
      });
    });
  }

  getCategoryEmoji(category?: string): string {
  switch (category) {
    case 'FOOD': return 'üçî';
    case 'TRANSPORT': return 'üöå';
    case 'HEALTH': return 'üíä';
    case 'ENTERTAINMENT': return 'üéâ';
    case 'OTHER': return 'üì¶';
    default: return '‚ùì';
  }
}

getCategoryName(category?: string): string {
  switch (category) {
    case 'FOOD': return '–á–∂–∞';
    case 'TRANSPORT': return '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç';
    case 'HEALTH': return '–ó–¥–æ—Ä–æ–≤ º—è';
    case 'ENTERTAINMENT': return '–†–æ–∑–≤–∞–≥–∏';
    case 'OTHER': return '–Ü–Ω—à–µ';
    default: return '–ù–µ–≤—ñ–¥–æ–º–æ';
  }
}

getCategoryClass(category?: string): string {
  switch (category) {
    case 'FOOD': return 'bg-warning text-dark';
    case 'TRANSPORT': return 'bg-info text-dark';
    case 'HEALTH': return 'bg-success';
    case 'ENTERTAINMENT': return 'bg-primary';
    case 'OTHER': return 'bg-secondary';
    default: return 'bg-dark';
  }
}

onCloseModal() {
  this.modalVisible = false;
  this.editingExpense = null;
}

}
