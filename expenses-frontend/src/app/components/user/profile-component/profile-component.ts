import { Component, OnInit, inject } from '@angular/core';
import { UserService } from '../../../services/user/user-service';
import { AuthService } from '../../../services/auth/auth-service';
import Swal from 'sweetalert2';
import { UpdateUserRequest } from '../../../models/user/update-user-request.model';
import { firstValueFrom, shareReplay } from 'rxjs';

@Component({
  selector: 'app-profile-component',
  standalone: false,
  templateUrl: './profile-component.html',
  styleUrls: ['./profile-component.css']
})
export class ProfileComponent implements OnInit {
  private userService = inject(UserService);
  private auth = inject(AuthService);

  user$ = this.userService.getUser(); 

  editProfileMode = false;
  profileUpdate: UpdateUserRequest = new UpdateUserRequest();

  editEmailMode = false;
  newEmail = '';

  oldPassword = '';
  newPassword = '';

  ngOnInit(): void {}

  async toggleEditProfile() {
    this.editProfileMode = !this.editProfileMode;
    if (this.editProfileMode) {
      try {
        const u = await firstValueFrom(this.user$);
        this.profileUpdate = { username: u.username, email: u.email };
      } catch {
        await Swal.fire('–ü–æ–º–∏–ª–∫–∞ üö®', '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', 'error');
        this.editProfileMode = false;
      }
    }
  }

  async saveProfile() {
    const name = (this.profileUpdate?.username || '').trim();
    if (!name) {
      await Swal.fire('–£—É–ø—Å ‚ö†Ô∏è', '–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', 'warning');
      return;
    }
    const payload: UpdateUserRequest = { username: name };
    try {
      await firstValueFrom(this.userService.updateUser(payload));
      this.user$ = this.userService.getUser(); 
      this.editProfileMode = false;
      await Swal.fire('–£—Å–ø—ñ—Ö üéâ', '–ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ', 'success');
    } catch (err: any) {
      await Swal.fire('–ü–æ–º–∏–ª–∫–∞ üö®', err?.error?.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ', 'error');
    }
  }

  async toggleEditEmail() {
    this.editEmailMode = !this.editEmailMode;
    if (this.editEmailMode) {
      try {
        const u = await firstValueFrom(this.user$);
        this.newEmail = u.email || '';
      } catch {
        await Swal.fire('–ü–æ–º–∏–ª–∫–∞ üö®', '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', 'error');
        this.editEmailMode = false;
      }
    }
  }

  private isValidEmail(v: string): boolean {
    const e = v.trim();
    return !!e && /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e);
  }

async startEmailChange() {
  const u = await firstValueFrom(this.user$);
  const email = (this.newEmail || '').trim();

  if (!this.isValidEmail(email) || email.toLowerCase() === (u.email || '').toLowerCase()) {
    await Swal.fire('–£—É–ø—Å ‚ö†Ô∏è', '–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –∫–æ—Ä–µ–∫—Ç–Ω—É email-–∞–¥—Ä–µ—Å—É', 'warning');
    return;
  }

  const Toast = Swal.mixin({ toast: true, position: 'top', showConfirmButton: false, timer: 1500 });
  Toast.fire({ icon: 'info', title: '–ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ–¥‚Ä¶' });

  try {
    const resp = await firstValueFrom(this.userService.updateEmail(email));
    Toast.fire({ icon: 'success', title: resp.message || '–ö–æ–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ' });

    const result = await Swal.fire({
      title: '–í–≤–µ–¥–∏ 6-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥',
      input: 'text',
      inputAttributes: { maxlength: '6', inputmode: 'numeric', autocapitalize: 'off', autocomplete: 'one-time-code' },
      showCancelButton: true,
      confirmButtonText: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏',
      cancelButtonText: '–°–∫–∞—Å—É–≤–∞—Ç–∏',
      allowOutsideClick: () => !Swal.isLoading(),
      inputValidator: (v) => (!v || !/^\d{6}$/.test(v) ? '–í–≤–µ–¥–∏ —Ä—ñ–≤–Ω–æ 6 —Ü–∏—Ñ—Ä' : undefined),
      preConfirm: async (otp) => {
        try {
          Swal.showLoading(); 
          const res = await firstValueFrom(this.userService.confirmEmailChange(email, otp));
          if (res?.token) this.auth.changeToken(res.token);
          this.user$ = this.userService.getUser();
          this.editEmailMode = false;
          return true;
        } catch (err: any) {
          Swal.hideLoading();
          Swal.showValidationMessage(err?.error?.message || '–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π –∫–æ–¥');
          return false;
        }
      }
    });

    if (result.isConfirmed) {
      await Swal.fire('–£—Å–ø—ñ—Ö üéâ', 'Email –æ–Ω–æ–≤–ª–µ–Ω–æ', 'success');
    }
  } catch (err: any) {
    await Swal.fire('–ü–æ–º–∏–ª–∫–∞ üö®', err?.error?.message || '–ü–æ—à—Ç–∞ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —á–∏ –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏', 'error');
  }
}

  hasMinLength(p: string) { return p.length >= 6; }
  hasNumber(p: string) { return /[0-9]/.test(p); }
  hasLetter(p: string) { return /[a-zA-Z]/.test(p); }
  hasSpecial(p: string) { return /[!@#$%^&*()_+\-=]/.test(p); }
  isPasswordValid(p: string) {
    const v = p.trim();
    return this.hasMinLength(v) && this.hasNumber(v) && this.hasLetter(v) && this.hasSpecial(v);
  }

  async changePassword() {
    const oldP = (this.oldPassword || '').trim();
    const newP = (this.newPassword || '').trim();

    if (!oldP) { await Swal.fire('–£—É–ø—Å ‚ö†Ô∏è', '–í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å', 'warning'); return; }
    if (!newP) { await Swal.fire('–£—É–ø—Å ‚ö†Ô∏è', '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å', 'warning'); return; }
    if (!this.isPasswordValid(newP)) {
      await Swal.fire('–£—É–ø—Å ‚ö†Ô∏è', '–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤, —Ü–∏—Ñ—Ä—É, –±—É–∫–≤—É —ñ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª', 'warning'); return;
    }

    try {
      await firstValueFrom(this.userService.changePassword(oldP, newP));
      this.oldPassword = '';
      this.newPassword = '';
      await Swal.fire('–£—Å–ø—ñ—Ö üéâ', '–ü–∞—Ä–æ–ª—å –∑–º—ñ–Ω–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 'success');
    } catch (err: any) {
      await Swal.fire('–ü–æ–º–∏–ª–∫–∞ üö®', err?.error?.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ', 'error');
    }
  }


}
